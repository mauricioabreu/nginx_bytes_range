worker_processes  1;

events {
    worker_connections  1024;
}

http {
    proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache:100m;

    lua_package_path '/etc/nginx/?.lua;;';
    
    include mime.types;
    default_type  application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $upstream_cache_status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log  logs/access.log  main;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    add_header  X-Cache-Status  $upstream_cache_status;

    sendfile        on;

    keepalive_timeout  60;

    upstream origin {
        server 127.0.0.1:81;
    }

    server {
        listen 80;

        proxy_http_version  1.1;

        location / {
            proxy_pass http://origin;
        }
    }

    server {
        listen 81;
        server_name origin;

        proxy_http_version  1.1;

        location /r {
            add_header Content-Type "video/mp4";
            content_by_lua_block {
                local range = require("range").new()
                local inspect = require("inspect")
                local subreq_response = ngx.location.capture("/d")

                local function read_body(response)
                    local body = ""
                    repeat
                        local chunk, err = response.body_reader()
                        if chunk then
                            body = body .. chunk
                        end
                    until not chunk
                    return body
                end

                local res, partial_response = range:handle_range_request(subreq_response)
                if partial_response then
                    local body_reader = coroutine.wrap(function()
                        coroutine.yield(res.body)
                    end)

                    res.body_reader = range:get_range_request_filter(
                        body_reader
                    )
                    local body = read_body(res)
                    ngx.status = res.status
                    ngx.header["Content-Length"] = #body
                    ngx.say(body)
                else
                    ngx.status = subreq_response.status
                    ngx.header["Content-Length"] = #subreq_response.body
                    ngx.say(subreq_response.body)
                end
            }
        }

        location /d {
            content_by_lua_block {
                local file = "/www/s/video.mp4"
                local f = io.open(file, "rb")
                local content = f:read("*all")
                f:close()
                ngx.header["Content-Length"] = #content
                ngx.say(content)
            }
        }
    }
}